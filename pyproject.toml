[tool.poetry]
name = "mltb2"
version = "0.9.1rc1"
description = "Machine Learning Toolbox 2"
authors = ["PhilipMay <philip@may.la>"]
readme = "README.md"
homepage = "https://github.com/telekom/mltb2"
documentation = "https://telekom.github.io/mltb2/"
include = ["LICENSE", "CONTRIBUTING.md", "Makefile"]
keywords = [
  "optuna",
  "deep learning",
  "ml",
  "ai",
  "machine learning",
  "hyperparameter optimization",
  "hyperparameter tuning",
  "nlp",
  "natural language processing",
  "transformers",
  "llm",
  "large-language-models",
  "openai",
  "plot",
]
# all classifiers see https://pypi.org/classifiers/
classifiers = [
  "Development Status :: 3 - Alpha",
  # "Development Status :: 4 - Beta",
  # "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Science/Research",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: German",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3 :: Only",
  "Topic :: Scientific/Engineering :: Mathematics",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Operating System :: OS Independent",
]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
arango-col-backup = 'mltb2.arangodb:arango_collection_backup'

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/telekom/mltb2/issues"

[tool.poetry.dependencies]
python = "^3.8"
numpy = "*"
scipy = "*"
tqdm = "*"
platformdirs = {version = "*", optional = true}
scikit-learn = {version = "*", optional = true}
fasttext-wheel = {version = "*", optional = true}
optuna = {version = "*", optional = true}
matplotlib = {version = "*", optional = true}
SoMaJo = {version = ">=2.3.1", optional = true}
torch = {version = "!=2.0.1,!=2.1.0", optional = true}  # some versions have poetry issues
transformers = {version = "*", optional = true}
tiktoken = {version = "*", optional = true}
safetensors = {version = "!=0.3.2", optional = true}  # version 0.3.2 has poetry issues
openai = {version = "^0", optional = true}
pyyaml = {version = "*", optional = true}
pandas = {version = "*", optional = true}
beautifulsoup4 = {version = "*", optional = true}
joblib = {version = "*", optional = true}
python-dotenv = {version = "*", optional = true}
python-arango = {version = "*", optional = true}
jsonlines = {version = "*", optional = true}

[tool.poetry.extras]
files = ["platformdirs", "scikit-learn"]
fasttext = ["fasttext-wheel", "platformdirs", "scikit-learn"]
data = ["platformdirs", "scikit-learn", "pandas", "beautifulsoup4", "joblib"]
optuna = ["optuna"]
plot = ["matplotlib"]
somajo = ["SoMaJo"]
transformers = ["scikit-learn", "torch", "transformers", "safetensors"]
md = ["scikit-learn", "torch", "transformers", "safetensors"]
somajo_transformers = ["SoMaJo", "scikit-learn", "torch", "transformers", "safetensors"]
openai = ["tiktoken", "openai", "pyyaml"]
arangodb = ["python-dotenv", "python-arango", "jsonlines"]

[tool.poetry.group.lint.dependencies]
black = "*"
ruff = "*"
mypy = "*"
mdformat = "*"

[tool.poetry.group.test.dependencies]
pytest = "*"

[tool.poetry.group.doc.dependencies]
sphinx = "*"
sphinx_rtd_theme = "*"
sphinx_copybutton = "*"

[tool.black]
line-length = 119
target-version = ["py38", "py39", "py310", "py311"]

[tool.ruff]
select = [
  "E",  # pycodestyle - https://beta.ruff.rs/docs/rules/#pycodestyle-e-w
  "F",  # pyflakes - https://beta.ruff.rs/docs/rules/#pyflakes-f
  "I",  # isort - https://beta.ruff.rs/docs/rules/#isort-i
  "D",  # pydocstyle - https://beta.ruff.rs/docs/rules/#pydocstyle-d
  "PL",  # Pylint - https://beta.ruff.rs/docs/rules/#pylint-pl
  "YTT",  # flake8-2020 - https://beta.ruff.rs/docs/rules/#flake8-2020-ytt
  # "ANN",
  "ASYNC",  # flake8-async - https://beta.ruff.rs/docs/rules/#flake8-async-async
  "S",  # flake8-bandit - https://beta.ruff.rs/docs/rules/#flake8-bandit-s
  "BLE",  # flake8-blind-except - https://beta.ruff.rs/docs/rules/#flake8-blind-except-ble
  # "FBT",
  "B",  # flake8-bugbear - https://beta.ruff.rs/docs/rules/#flake8-bugbear-b
  "A",  # flake8-builtins - https://beta.ruff.rs/docs/rules/#flake8-builtins-a
  "COM",  # flake8-commas - https://beta.ruff.rs/docs/rules/#flake8-commas-com
  "CPY001",  # flake8-copyright - https://beta.ruff.rs/docs/rules/#flake8-copyright-cpy
  "C4",  # flake8-comprehensions - https://beta.ruff.rs/docs/rules/#flake8-comprehensions-c4
  "DTZ",  # flake8-datetimez - https://beta.ruff.rs/docs/rules/#flake8-datetimez-dtz
  "T10",  # flake8-debugger - https://beta.ruff.rs/docs/rules/#flake8-debugger-t10
  # "EM",
  "EXE",  # flake8-executable - https://beta.ruff.rs/docs/rules/#flake8-executable-exe
]
line-length = 119
fixable = ["I"]
target-version = "py38"
ignore = [
  "D107",  # Missing docstring in __init__
  "D410",  # Missing blank line after section ("{name}")
  "D411",  # Missing blank line before section ("{name}")
  "PLR0913",  # Too many arguments to function call ({c_args} > {max_args})
  "S106",  # Possible hardcoded password assigned to argument: "{}"
  "COM812",  # Trailing comma missing
  "S101",  # Use of `assert` detected
  "PLR2004",  # Magic value used in comparison
  "B011",  # Do not `assert False`
]

[tool.ruff.per-file-ignores]
"tests/**/test_*.py" = [
  "D100",  # Missing docstring in public module
  "D103",  # Missing docstring in public function
  "PLR2004",  # Magic value used in comparison, consider replacing {value} with a constant variable
  "S101",  # Use of assert detected
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.flake8-copyright]
notice-rgx = "(# Copyright \\(c\\) \\d{4} .*\\n)+# This software is distributed under the terms of the MIT license\\n# which is available at https://opensource.org/licenses/MIT\\n\\n"

[tool.mypy]
ignore_missing_imports = true
